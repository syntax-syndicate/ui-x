{
  "name": "date-time-field-primitive",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-compose-refs",
    "@radix-ui/react-primitive",
    "timescape"
  ],
  "files": [
    {
      "path": "ui/date-time-field-primitive.tsx",
      "content": "import * as React from \"react\"\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\"\nimport { Primitive } from \"@radix-ui/react-primitive\"\n\nimport {\n  useTimescape,\n  UseTimescapeOptions,\n} from \"@/registry/new-york/hooks/use-timescape\"\n\nexport type DateTimeFieldContextProps = {\n  disabled?: boolean\n} & ReturnType<typeof useTimescape>\n\nconst DateTimeFieldContext = React.createContext<DateTimeFieldContextProps>({\n  getInputProps: () => ({ ref: () => null }),\n  getRootProps: () => ({ ref: () => null }),\n  options: {},\n  disabled: false,\n})\n\nexport const useDateTimeFieldContext = () =>\n  React.useContext(DateTimeFieldContext)\n\nexport interface DateTimeFieldProps\n  extends UseTimescapeOptions,\n    Omit<\n      React.ComponentPropsWithoutRef<typeof Primitive.div>,\n      \"value\" | \"defaultValue\"\n    > {\n  disabled?: boolean\n}\n\nexport const DateTimeField = React.forwardRef<\n  React.ElementRef<typeof Primitive.div>,\n  DateTimeFieldProps\n>(\n  (\n    {\n      value,\n      defaultValue,\n      onValueChange,\n      disabled,\n      digits,\n      hour12,\n      maxDate,\n      minDate,\n      snapToStep,\n      wheelControl,\n      wrapAround,\n      ...props\n    },\n    ref\n  ) => {\n    const timescape = useTimescape({\n      value,\n      defaultValue,\n      onValueChange,\n      digits,\n      hour12,\n      maxDate,\n      minDate,\n      snapToStep,\n      wheelControl,\n      wrapAround,\n    })\n\n    const { ref: rootRef, ...rootProps } = timescape.getRootProps()\n\n    const composedRefs = useComposedRefs(ref, (node) => rootRef(node)!)\n\n    return (\n      <DateTimeFieldContext.Provider value={{ ...timescape, disabled }}>\n        <Primitive.div\n          ref={composedRefs}\n          data-disabled={disabled}\n          {...rootProps}\n          {...props}\n        />\n      </DateTimeFieldContext.Provider>\n    )\n  }\n)\nDateTimeField.displayName = \"DateTimeField\"\n\nexport const DateTimeFieldSeparator = React.forwardRef<\n  React.ElementRef<typeof Primitive.span>,\n  React.ComponentPropsWithoutRef<typeof Primitive.span>\n>((props, ref) => {\n  const { disabled } = useDateTimeFieldContext()\n\n  return (\n    <Primitive.span\n      ref={ref}\n      aria-hidden=\"true\"\n      data-disabled={disabled}\n      {...props}\n    />\n  )\n})\nDateTimeFieldSeparator.displayName = \"DateTimeFieldSeparator\"\n\nexport const DateTimeFieldYears = React.forwardRef<\n  React.ElementRef<typeof Primitive.input>,\n  React.ComponentPropsWithoutRef<typeof Primitive.input>\n>(({ disabled: disabledProp, ...props }, ref) => {\n  const { getInputProps, disabled } = useDateTimeFieldContext()\n\n  const { ref: inputRef, ...inputProps } = getInputProps(\"years\")\n\n  const composedRefs = useComposedRefs(ref, inputRef)\n\n  return (\n    <Primitive.input\n      ref={composedRefs}\n      {...inputProps}\n      disabled={disabled || disabledProp}\n      {...props}\n    />\n  )\n})\nDateTimeFieldYears.displayName = \"DateTimeFieldYears\"\n\nexport const DateTimeFieldMonths = React.forwardRef<\n  React.ElementRef<typeof Primitive.input>,\n  React.ComponentPropsWithoutRef<typeof Primitive.input>\n>(({ disabled: disabledProp, ...props }, ref) => {\n  const { getInputProps, disabled } = useDateTimeFieldContext()\n\n  const { ref: inputRef, ...inputProps } = getInputProps(\"months\")\n\n  const composedRefs = useComposedRefs(ref, inputRef)\n\n  return (\n    <Primitive.input\n      ref={composedRefs}\n      {...inputProps}\n      disabled={disabled || disabledProp}\n      {...props}\n    />\n  )\n})\nDateTimeFieldMonths.displayName = \"DateTimeFieldMonths\"\n\nexport const DateTimeFieldDays = React.forwardRef<\n  React.ElementRef<typeof Primitive.input>,\n  React.ComponentPropsWithoutRef<typeof Primitive.input>\n>(({ disabled: disabledProp, ...props }, ref) => {\n  const { getInputProps, disabled } = useDateTimeFieldContext()\n\n  const { ref: inputRef, ...inputProps } = getInputProps(\"days\")\n\n  const composedRefs = useComposedRefs(ref, inputRef)\n\n  return (\n    <Primitive.input\n      ref={composedRefs}\n      {...inputProps}\n      disabled={disabled || disabledProp}\n      {...props}\n    />\n  )\n})\nDateTimeFieldDays.displayName = \"DateTimeFieldDays\"\n\nexport const DateTimeFieldHours = React.forwardRef<\n  React.ElementRef<typeof Primitive.input>,\n  React.ComponentPropsWithoutRef<typeof Primitive.input>\n>(({ disabled: disabledProp, ...props }, ref) => {\n  const { getInputProps, disabled } = useDateTimeFieldContext()\n\n  const { ref: inputRef, ...inputProps } = getInputProps(\"hours\")\n\n  const composedRefs = useComposedRefs(ref, inputRef)\n\n  return (\n    <Primitive.input\n      ref={composedRefs}\n      {...inputProps}\n      disabled={disabled || disabledProp}\n      {...props}\n    />\n  )\n})\nDateTimeFieldHours.displayName = \"DateTimeFieldHours\"\n\nexport const DateTimeFieldMinutes = React.forwardRef<\n  React.ElementRef<typeof Primitive.input>,\n  React.ComponentPropsWithoutRef<typeof Primitive.input>\n>(({ disabled: disabledProp, ...props }, ref) => {\n  const { getInputProps, disabled } = useDateTimeFieldContext()\n\n  const { ref: inputRef, ...inputProps } = getInputProps(\"minutes\")\n\n  const composedRefs = useComposedRefs(ref, inputRef)\n\n  return (\n    <Primitive.input\n      ref={composedRefs}\n      {...inputProps}\n      disabled={disabled || disabledProp}\n      {...props}\n    />\n  )\n})\nDateTimeFieldMinutes.displayName = \"DateTimeFieldMinutes\"\n\nexport const DateTimeFieldSeconds = React.forwardRef<\n  React.ElementRef<typeof Primitive.input>,\n  React.ComponentPropsWithoutRef<typeof Primitive.input>\n>(({ disabled: disabledProp, ...props }, ref) => {\n  const { getInputProps, disabled } = useDateTimeFieldContext()\n\n  const { ref: inputRef, ...inputProps } = getInputProps(\"seconds\")\n\n  const composedRefs = useComposedRefs(ref, inputRef)\n\n  return (\n    <Primitive.input\n      ref={composedRefs}\n      {...inputProps}\n      disabled={disabled || disabledProp}\n      {...props}\n    />\n  )\n})\nDateTimeFieldSeconds.displayName = \"DateTimeFieldSeconds\"\n\nexport const DateTimeFieldAmPm = React.forwardRef<\n  React.ElementRef<typeof Primitive.input>,\n  React.ComponentPropsWithoutRef<typeof Primitive.input>\n>(({ disabled: disabledProp, ...props }, ref) => {\n  const { getInputProps, disabled, options } = useDateTimeFieldContext()\n\n  const { ref: inputRef, ...inputProps } = getInputProps(\"am/pm\")\n\n  const composedRefs = useComposedRefs(ref, inputRef)\n\n  if (!options?.hour12) {\n    return null\n  }\n\n  return (\n    <Primitive.input\n      ref={composedRefs}\n      {...inputProps}\n      disabled={disabled || disabledProp}\n      {...props}\n    />\n  )\n})\nDateTimeFieldAmPm.displayName = \"DateTimeFieldAmPm\"\n\nconst Root = DateTimeField\nconst Separator = DateTimeFieldSeparator\nconst Days = DateTimeFieldDays\nconst Months = DateTimeFieldMonths\nconst Years = DateTimeFieldYears\nconst Hours = DateTimeFieldHours\nconst Minutes = DateTimeFieldMinutes\nconst Seconds = DateTimeFieldSeconds\nconst AmPm = DateTimeFieldAmPm\n\nexport { Root, Separator, Days, Months, Years, Hours, Minutes, Seconds, AmPm }\n",
      "type": "registry:ui"
    },
    {
      "path": "hooks/use-timescape.ts",
      "content": "import * as React from \"react\"\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\"\nimport { DateRange } from \"react-day-picker\"\nimport {\n  Options,\n  useTimescape as useReactTimescape,\n  useTimescapeRange as useReactTimescapeRange,\n} from \"timescape/react\"\n\nexport type TimescapeOptions = Omit<Options, \"date\" | \"onChangeDate\">\n\nexport interface UseTimescapeOptions extends TimescapeOptions {\n  value?: Date | null\n  defaultValue?: Date\n  onValueChange?: (value: Date | null) => void\n}\n\nexport const useTimescape = ({\n  value: valueProp,\n  defaultValue,\n  onValueChange,\n  digits,\n  hour12,\n  maxDate,\n  minDate,\n  snapToStep,\n  wheelControl,\n  wrapAround,\n}: UseTimescapeOptions) => {\n  const [value, setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange,\n  })\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { update, _manager, ...timescape } = useReactTimescape({\n    date: !value ? undefined : value, // This is the initial value.\n    onChangeDate: setValue,\n    digits,\n    hour12,\n    maxDate,\n    minDate,\n    snapToStep,\n    wheelControl,\n    wrapAround,\n    // Partial input does not work with reactive value at the moment.\n    // For more information, see https://github.com/dan-lee/timescape/issues/51.\n    disallowPartial: true,\n  })\n\n  React.useEffect(() => {\n    update((prevOptions) => ({\n      ...prevOptions,\n      date: !value ? undefined : value,\n    }))\n  }, [value, update])\n\n  React.useEffect(() => {\n    update((prevOptions) => ({ ...prevOptions, digits }))\n  }, [digits, update])\n\n  React.useEffect(() => {\n    update((prevOptions) => ({ ...prevOptions, hour12 }))\n  }, [hour12, update])\n\n  React.useEffect(() => {\n    update((prevOptions) => ({ ...prevOptions, maxDate }))\n  }, [maxDate, update])\n\n  React.useEffect(() => {\n    update((prevOptions) => ({ ...prevOptions, minDate }))\n  }, [minDate, update])\n\n  React.useEffect(() => {\n    update((prevOptions) => ({ ...prevOptions, snapToStep }))\n  }, [snapToStep, update])\n\n  React.useEffect(() => {\n    update((prevOptions) => ({ ...prevOptions, wheelControl }))\n  }, [wheelControl, update])\n\n  React.useEffect(() => {\n    update((prevOptions) => ({ ...prevOptions, wrapAround }))\n  }, [wrapAround, update])\n\n  return timescape\n}\n\nexport interface UseTimescapeRangeOptions extends TimescapeOptions {\n  value?: DateRange | null\n  defaultValue?: DateRange\n  onValueChange?: (value: DateRange | null) => void\n  from?: TimescapeOptions\n  to?: TimescapeOptions\n}\n\nexport const useTimescapeRange = ({\n  value: valueProp,\n  defaultValue,\n  onValueChange,\n  digits,\n  hour12,\n  maxDate,\n  minDate,\n  snapToStep,\n  wheelControl,\n  wrapAround,\n  from: fromOptions = {},\n  to: toOptions = {},\n}: UseTimescapeRangeOptions) => {\n  const [value, setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange,\n  })\n\n  const { from, to, ...timescape } = useReactTimescapeRange({\n    from: {\n      date: !value?.from ? undefined : value.from, // This is the initial value.\n      onChangeDate: (from) =>\n        setValue((prevValue) => ({ from, to: prevValue?.to })),\n      digits,\n      hour12,\n      maxDate,\n      minDate,\n      snapToStep,\n      wheelControl,\n      wrapAround,\n      // Partial input does not work with reactive value at the moment.\n      // For more information, see https://github.com/dan-lee/timescape/issues/51.\n      disallowPartial: true,\n      ...fromOptions,\n    },\n    to: {\n      date: !value?.to ? undefined : value.to, // This is the initial value.\n      onChangeDate: (to) =>\n        setValue((prevValue) => ({ from: prevValue?.from, to })),\n      digits,\n      hour12,\n      maxDate,\n      minDate,\n      snapToStep,\n      wheelControl,\n      wrapAround,\n      // Partial input does not work with reactive value at the moment.\n      // For more information, see https://github.com/dan-lee/timescape/issues/51.\n      disallowPartial: true,\n      ...toOptions,\n    },\n  })\n\n  // ----------------------------------------------------------------------------\n  // Sync `from`\n  // ----------------------------------------------------------------------------\n\n  const { update: fromUpdate, ...fromTimescape } = from\n\n  React.useEffect(() => {\n    fromUpdate((prevOptions) => ({\n      ...prevOptions,\n      digits: fromOptions.digits ?? digits,\n    }))\n  }, [digits, fromOptions.digits, fromUpdate])\n\n  React.useEffect(() => {\n    fromUpdate((prevOptions) => ({\n      ...prevOptions,\n      hour12: fromOptions.hour12 ?? hour12,\n    }))\n  }, [hour12, fromOptions.hour12, fromUpdate])\n\n  React.useEffect(() => {\n    fromUpdate((prevOptions) => ({\n      ...prevOptions,\n      maxDate: fromOptions.maxDate ?? maxDate,\n    }))\n  }, [maxDate, fromOptions.maxDate, fromUpdate])\n\n  React.useEffect(() => {\n    fromUpdate((prevOptions) => ({\n      ...prevOptions,\n      minDate: fromOptions.minDate ?? minDate,\n    }))\n  }, [minDate, fromOptions.minDate, fromUpdate])\n\n  React.useEffect(() => {\n    fromUpdate((prevOptions) => ({\n      ...prevOptions,\n      snapToStep: fromOptions.snapToStep ?? snapToStep,\n    }))\n  }, [snapToStep, fromOptions.snapToStep, fromUpdate])\n\n  React.useEffect(() => {\n    fromUpdate((prevOptions) => ({\n      ...prevOptions,\n      wheelControl: fromOptions.wheelControl ?? wheelControl,\n    }))\n  }, [wheelControl, fromOptions.wheelControl, fromUpdate])\n\n  React.useEffect(() => {\n    fromUpdate((prevOptions) => ({\n      ...prevOptions,\n      wrapAround: fromOptions.wrapAround ?? wrapAround,\n    }))\n  }, [wrapAround, fromOptions.wrapAround, fromUpdate])\n\n  // ----------------------------------------------------------------------------\n  // Sync `to`\n  // ----------------------------------------------------------------------------\n\n  const { update: toUpdate, ...toTimescape } = to\n\n  React.useEffect(() => {\n    toUpdate((prevOptions) => ({\n      ...prevOptions,\n      digits: toOptions.digits ?? digits,\n    }))\n  }, [digits, toOptions.digits, toUpdate])\n\n  React.useEffect(() => {\n    toUpdate((prevOptions) => ({\n      ...prevOptions,\n      hour12: toOptions.hour12 ?? hour12,\n    }))\n  }, [hour12, toOptions.hour12, toUpdate])\n\n  React.useEffect(() => {\n    toUpdate((prevOptions) => ({\n      ...prevOptions,\n      maxDate: toOptions.maxDate ?? maxDate,\n    }))\n  }, [maxDate, toOptions.maxDate, toUpdate])\n\n  React.useEffect(() => {\n    toUpdate((prevOptions) => ({\n      ...prevOptions,\n      minDate: toOptions.minDate ?? minDate,\n    }))\n  }, [minDate, toOptions.minDate, toUpdate])\n\n  React.useEffect(() => {\n    toUpdate((prevOptions) => ({\n      ...prevOptions,\n      snapToStep: toOptions.snapToStep ?? snapToStep,\n    }))\n  }, [snapToStep, toOptions.snapToStep, toUpdate])\n\n  React.useEffect(() => {\n    toUpdate((prevOptions) => ({\n      ...prevOptions,\n      wheelControl: toOptions.wheelControl ?? wheelControl,\n    }))\n  }, [wheelControl, toOptions.wheelControl, toUpdate])\n\n  React.useEffect(() => {\n    toUpdate((prevOptions) => ({\n      ...prevOptions,\n      wrapAround: toOptions.wrapAround ?? wrapAround,\n    }))\n  }, [wrapAround, toOptions.wrapAround, toUpdate])\n\n  // ----------------------------------------------------------------------------\n  // Sync `value`\n  // ----------------------------------------------------------------------------\n\n  React.useEffect(() => {\n    fromUpdate((prevOptions) => ({\n      ...prevOptions,\n      date: !value?.from ? undefined : value.from,\n    }))\n    toUpdate((prevOptions) => ({\n      ...prevOptions,\n      date: !value?.to ? undefined : value.to,\n    }))\n  }, [value, fromUpdate, toUpdate])\n\n  return {\n    ...timescape,\n    from: fromTimescape,\n    to: toTimescape,\n  }\n}\n",
      "type": "registry:hook"
    }
  ]
}