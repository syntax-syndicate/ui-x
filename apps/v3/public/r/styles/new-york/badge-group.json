{
  "name": "badge-group",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/primitive",
    "@radix-ui/react-slot",
    "@radix-ui/react-toggle-group",
    "@radix-ui/react-use-controllable-state"
  ],
  "files": [
    {
      "path": "ui/badge-group.tsx",
      "content": "import * as React from \"react\"\nimport { composeEventHandlers } from \"@radix-ui/primitive\"\nimport { Slottable } from \"@radix-ui/react-slot\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport type BadgeGroupContextProps =\n  | {\n      type: \"single\"\n      value: string\n      onValueChange: (value: string) => void\n      onRemove?: (value: string) => void\n    }\n  | {\n      type: \"multiple\"\n      value: string[]\n      onValueChange: (value: string[]) => void\n      onRemove: (value: string[]) => void\n    }\n\nconst BadgeGroupContext = React.createContext<BadgeGroupContextProps>({\n  type: \"single\",\n  value: \"\",\n  onValueChange: () => {},\n  onRemove: undefined,\n})\n\nconst useBadgeGroupContext = () => React.useContext(BadgeGroupContext)\n\nexport type BadgeGroupType = \"single\" | \"multiple\"\n\nexport type BadgeGroupValue<T extends BadgeGroupType = \"single\"> =\n  T extends \"single\" ? string : T extends \"multiple\" ? string[] : never\n\nexport type BadgeGroupProps = BadgeGroupSingleProps | BadgeGroupMultipleProps\n\nexport interface BadgeGroupSingleProps\n  extends ToggleGroupPrimitive.ToggleGroupSingleProps {\n  onRemove?: (value: string) => void\n}\n\nexport interface BadgeGroupMultipleProps\n  extends ToggleGroupPrimitive.ToggleGroupMultipleProps {\n  onRemove?: (value: string[]) => void\n}\n\nexport const BadgeGroup = React.forwardRef(\n  <T extends BadgeGroupType = \"single\">(\n    {\n      type = \"single\" as T,\n      className,\n      children,\n      onRemove,\n      value: valueProp,\n      defaultValue,\n      onValueChange,\n      ...props\n    }: BadgeGroupProps,\n    ref: React.ForwardedRef<React.ElementRef<typeof ToggleGroupPrimitive.Root>>\n  ) => {\n    const [value = type === \"multiple\" ? [] : \"\", setValue] =\n      useControllableState<BadgeGroupValue<T>>({\n        prop: valueProp as BadgeGroupValue<T>,\n        defaultProp: defaultValue as BadgeGroupValue<T>,\n        onChange: onValueChange as (value: BadgeGroupValue<T>) => void,\n      })\n\n    return (\n      <ToggleGroupPrimitive.Root\n        ref={ref}\n        className={cn(\"flex gap-2\", className)}\n        {...({\n          type,\n          value,\n          onValueChange: setValue,\n        } as React.ComponentProps<typeof ToggleGroupPrimitive.Root>)}\n        {...props}\n      >\n        <BadgeGroupContext.Provider\n          value={\n            {\n              type,\n              onRemove,\n              value,\n              onValueChange: setValue,\n            } as BadgeGroupContextProps\n          }\n        >\n          <Slottable>{children}</Slottable>\n        </BadgeGroupContext.Provider>\n      </ToggleGroupPrimitive.Root>\n    )\n  }\n)\nBadgeGroup.displayName = \"BadgeGroup\"\n\nexport const BadgeGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item>\n>(({ value: valueProp, className, ...props }, ref) => {\n  const { type, onRemove, value } = useBadgeGroupContext()\n\n  return (\n    <BadgeGroupItemImpl\n      ref={ref}\n      value={valueProp}\n      className={cn(\n        \"group inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 data-[disabled]:pointer-events-none data-[state=on]:border-transparent data-[state=on]:bg-primary data-[state=on]:text-primary-foreground data-[disabled]:opacity-50 data-[state=on]:shadow data-[state=on]:hover:bg-primary/80\",\n        onRemove && \"gap-1 pr-1.5\",\n        className\n      )}\n      onRemove={\n        onRemove &&\n        ((_, reason) => {\n          if (reason === \"closeClick\") {\n            if (type === \"single\") {\n              onRemove(valueProp)\n            }\n            if (type === \"multiple\") {\n              onRemove([valueProp])\n            }\n          } else {\n            if (type === \"single\") {\n              onRemove?.(valueProp)\n            }\n            if (type === \"multiple\") {\n              onRemove?.(value.includes(valueProp) ? value : [valueProp])\n            }\n          }\n        })\n      }\n      {...props}\n    />\n  )\n})\nBadgeGroupItem.displayName = \"BadgeGroupItem\"\n\ninterface BadgeGroupItemImplProps\n  extends React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> {\n  onRemove?: (\n    event: React.MouseEvent | React.KeyboardEvent,\n    reason: \"closeClick\" | \"backspaceKeyDown\" | \"deleteKeyDown\"\n  ) => void\n}\n\nconst BadgeGroupItemImpl = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  BadgeGroupItemImplProps\n>(({ onRemove, onKeyDown, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Item\n    ref={ref}\n    onKeyDown={composeEventHandlers(onKeyDown, (event) => {\n      if (event.key === \"Backspace\" || event.key === \"Delete\") {\n        onRemove?.(\n          event,\n          event.key === \"Backspace\" ? \"backspaceKeyDown\" : \"deleteKeyDown\"\n        )\n      }\n    })}\n    {...props}\n  >\n    <Slottable>{children}</Slottable>\n    {onRemove && (\n      <div\n        aria-hidden\n        onClick={(event) => {\n          event.stopPropagation()\n          onRemove(event, \"closeClick\")\n        }}\n        className=\"cursor-pointer rounded-sm opacity-70 transition-opacity hover:opacity-100 group-data-[disabled]:pointer-events-none\"\n      >\n        <X className=\"size-4\" />\n        <span className=\"sr-only\">Remove</span>\n      </div>\n    )}\n  </ToggleGroupPrimitive.Item>\n))\nBadgeGroupItemImpl.displayName = \"BadgeGroupItemImpl\"\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}