{
  "name": "timeline",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/timeline.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype TimelineContext = {\n  orientation: \"horizontal\" | \"vertical\"\n}\n\nconst TimelineContext = React.createContext<TimelineContext | null>(null)\n\nfunction useTimeline() {\n  const context = React.useContext(TimelineContext)\n  if (!context) {\n    throw new Error(\"useTimeline must be used within a <Timeline />.\")\n  }\n\n  return context\n}\n\nexport interface TimelineProps extends React.ComponentPropsWithoutRef<\"ol\"> {\n  orientation?: \"horizontal\" | \"vertical\"\n}\n\nexport const Timeline = React.forwardRef<React.ElementRef<\"ol\">, TimelineProps>(\n  ({ className, orientation = \"vertical\", ...props }, ref) => (\n    <TimelineContext.Provider value={{ orientation }}>\n      <ol\n        ref={ref}\n        role=\"list\"\n        data-orientation={orientation}\n        className={cn(\n          \"flex\",\n          orientation === \"vertical\" && \"flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </TimelineContext.Provider>\n  )\n)\nTimeline.displayName = \"Timeline\"\n\nexport const TimelineItem = React.forwardRef<\n  React.ElementRef<\"li\">,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => {\n  const { orientation } = useTimeline()\n\n  return (\n    <li\n      ref={ref}\n      data-orientation={orientation}\n      className={cn(\n        \"flex gap-4\",\n        orientation === \"horizontal\" && \"flex-col\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nTimelineItem.displayName = \"TimelineItem\"\n\nexport const TimelineSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => {\n  const { orientation } = useTimeline()\n\n  return (\n    <div\n      ref={ref}\n      data-orientation={orientation}\n      className={cn(\n        \"flex items-center\",\n        orientation === \"vertical\" && \"flex-col\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nTimelineSeparator.displayName = \"TimelineSeparator\"\n\nexport interface TimelineDotProps\n  extends React.ComponentPropsWithoutRef<\"div\"> {\n  variant?: \"default\" | \"outline\"\n}\n\nexport const TimelineDot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  TimelineDotProps\n>(({ variant = \"default\", className, ...props }, ref) => {\n  const { orientation } = useTimeline()\n\n  return (\n    <div\n      ref={ref}\n      data-orientation={orientation}\n      className={cn(\n        \"flex size-4 items-center justify-center empty:after:block empty:after:rounded-full empty:after:outline-current [&_svg]:size-4\",\n        orientation === \"vertical\" && \"mt-1\",\n        variant === \"default\" && \"empty:after:size-2.5 empty:after:bg-current\",\n        variant === \"outline\" && \"empty:after:size-2 empty:after:outline\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nTimelineDot.displayName = \"TimelineDot\"\n\nexport const TimelineConnector = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => {\n  const { orientation } = useTimeline()\n\n  return (\n    <div\n      ref={ref}\n      data-orientation={orientation}\n      className={cn(\n        \"flex-1 bg-border\",\n        orientation === \"vertical\" && \"my-2 w-0.5\",\n        orientation === \"horizontal\" && \"mx-2 h-0.5\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nTimelineConnector.displayName = \"TimelineConnector\"\n\nexport const TimelineContent = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => {\n  const { orientation } = useTimeline()\n\n  return (\n    <div\n      ref={ref}\n      data-orientation={orientation}\n      className={cn(\n        \"flex-1\",\n        orientation === \"vertical\" && \"pb-7 first:text-right last:text-left\",\n        orientation === \"horizontal\" && \"pr-7\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nTimelineContent.displayName = \"TimelineContent\"\n\nexport const TimelineTitle = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>((props, ref) => {\n  const { orientation } = useTimeline()\n\n  return <div ref={ref} data-orientation={orientation} {...props} />\n})\nTimelineTitle.displayName = \"TimelineTitle\"\n\nexport const TimelineDescription = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => {\n  const { orientation } = useTimeline()\n\n  return (\n    <div\n      ref={ref}\n      data-orientation={orientation}\n      className={cn(\"text-[0.8em] text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nTimelineDescription.displayName = \"TimelineDescription\"\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}