{
  "name": "phone-input",
  "type": "registry:ui",
  "dependencies": [
    "react-international-phone"
  ],
  "registryDependencies": [
    "input-base"
  ],
  "files": [
    {
      "path": "ui/phone-input.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\"\nimport { CountryIso2, usePhoneInput } from \"react-international-phone\"\n\nimport {\n  InputBase,\n  InputBaseControl,\n  InputBaseInput,\n} from \"@/registry/new-york/ui/input-base\"\n\nexport interface PhoneInputProps\n  extends Omit<\n    React.ComponentPropsWithoutRef<typeof InputBaseInput>,\n    \"value\" | \"onChange\"\n  > {\n  value?: string\n  defaultValue?: string\n  onValueChange?: (value: string) => void\n  country?: CountryIso2\n  defaultCountry?: CountryIso2\n  onCountryChange?: (country: CountryIso2) => void\n}\n\nexport const PhoneInput = React.forwardRef<\n  React.ElementRef<typeof InputBase>,\n  PhoneInputProps\n>(\n  (\n    {\n      value: valueProp,\n      defaultValue,\n      onValueChange,\n      // country: countryProp,\n      // defaultCountry,\n      // onCountryChange,\n      ...props\n    },\n    ref\n  ) => {\n    const [value, setValue] = useControllableState({\n      prop: valueProp,\n      defaultProp: defaultValue,\n      onChange: onValueChange,\n    })\n\n    const { inputRef, inputValue, handlePhoneValueChange } = usePhoneInput({\n      value,\n      onChange: ({ phone }) => setValue(phone),\n    })\n\n    return (\n      <InputBase ref={ref}>\n        <InputBaseControl>\n          <InputBaseInput\n            ref={inputRef}\n            value={inputValue}\n            onChange={handlePhoneValueChange}\n            {...props}\n          />\n        </InputBaseControl>\n      </InputBase>\n    )\n  }\n)\nPhoneInput.displayName = \"PhoneInput\"\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}