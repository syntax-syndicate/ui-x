{
  "name": "date-picker-primitive",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/primitive",
    "@radix-ui/react-popover",
    "@radix-ui/react-primitive",
    "@radix-ui/react-slot",
    "@radix-ui/react-use-controllable-state",
    "date-fns",
    "react-day-picker"
  ],
  "registryDependencies": [
    "date-time-field-primitive",
    "date-time-range-field-primitive"
  ],
  "files": [
    {
      "path": "ui/date-picker-primitive.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { composeEventHandlers } from \"@radix-ui/primitive\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\nimport { Primitive } from \"@radix-ui/react-primitive\"\nimport type * as Radix from \"@radix-ui/react-primitive\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\"\nimport { format } from \"date-fns\"\nimport {\n  DayPicker,\n  type Mode as DatePickerMode,\n  type DateRange,\n  type DayPickerProps as DayPickerPrimitiveProps,\n} from \"react-day-picker\"\n\nimport * as DateTimeFieldPrimitive from \"@/registry/new-york/ui/date-time-field-primitive\"\nimport * as DateTimeRangeFieldPrimitive from \"@/registry/new-york/ui/date-time-range-field-primitive\"\n\n// TODO: start month / end month sync with calendar and date field\n\nexport type DatePickerContextProps = {\n  formatStr: string\n  month?: Date\n  onMonthChange: (month: Date) => void\n  disabled?: boolean\n} & (\n  | Required<\n      Pick<\n        DatePickerSingleProps,\n        \"mode\" | \"required\" | \"value\" | \"onValueChange\"\n      >\n    >\n  | Required<\n      Pick<\n        DatePickerSingleRequiredProps,\n        \"mode\" | \"required\" | \"value\" | \"onValueChange\"\n      >\n    >\n  | Required<\n      Pick<\n        DatePickerMultipleProps,\n        \"mode\" | \"required\" | \"value\" | \"onValueChange\"\n      >\n    >\n  | Required<\n      Pick<\n        DatePickerMultipleRequiredProps,\n        \"mode\" | \"required\" | \"value\" | \"onValueChange\"\n      >\n    >\n  | Required<\n      Pick<\n        DatePickerRangeProps,\n        \"mode\" | \"required\" | \"value\" | \"onValueChange\"\n      >\n    >\n  | Required<\n      Pick<\n        DatePickerRangeRequiredProps,\n        \"mode\" | \"required\" | \"value\" | \"onValueChange\"\n      >\n    >\n)\n\nconst DatePickerContext = React.createContext<DatePickerContextProps>({\n  mode: \"single\",\n  formatStr: \"PPP\",\n  month: undefined,\n  onMonthChange: () => {},\n  value: null,\n  onValueChange: () => {},\n  disabled: false,\n  required: false,\n})\n\nexport const useDatePickerContext = () => React.useContext(DatePickerContext)\n\nexport interface DatePickerBaseProps\n  extends React.ComponentProps<typeof PopoverPrimitive.Root> {\n  mode?: DatePickerMode | undefined\n  required?: boolean\n  formatStr?: string\n  month?: Date\n  defaultMonth?: Date\n  onMonthChange?: (month: Date) => void\n  disabled?: boolean\n}\n\nexport type DatePickerValue<T extends DatePickerMode = \"single\"> =\n  T extends \"single\"\n    ? Date\n    : T extends \"multiple\"\n      ? Date[]\n      : T extends \"range\"\n        ? DateRange\n        : never\n\nexport interface DatePickerSingleProps {\n  mode: \"single\"\n  required?: false | undefined\n  value?: Date | null\n  defaultValue?: Date\n  onValueChange?: (value: Date | null) => void\n}\n\nexport interface DatePickerSingleRequiredProps {\n  mode: \"single\"\n  required: true\n  value?: Date\n  defaultValue?: Date\n  onValueChange?: (value: Date) => void\n}\n\nexport interface DatePickerMultipleProps {\n  mode: \"multiple\"\n  required?: false | undefined\n  value?: Date[] | null\n  defaultValue?: Date[]\n  onValueChange?: (value: Date[] | null) => void\n}\n\nexport interface DatePickerMultipleRequiredProps {\n  mode: \"multiple\"\n  required: true\n  value?: Date[]\n  defaultValue?: Date[]\n  onValueChange?: (value: Date[]) => void\n}\n\nexport interface DatePickerRangeProps {\n  mode: \"range\"\n  required?: false | undefined\n  value?: DateRange | null\n  defaultValue?: DateRange\n  onValueChange?: (value: DateRange | null) => void\n}\n\nexport interface DatePickerRangeRequiredProps {\n  mode: \"range\"\n  required: true\n  value?: DateRange\n  defaultValue?: DateRange\n  onValueChange?: (value: DateRange) => void\n}\n\nexport type DatePickerProps = DatePickerBaseProps &\n  (\n    | DatePickerSingleProps\n    | DatePickerSingleRequiredProps\n    | DatePickerMultipleProps\n    | DatePickerMultipleRequiredProps\n    | DatePickerRangeProps\n    | DatePickerRangeRequiredProps\n  )\n\nexport const DatePicker = <T extends DatePickerMode = \"single\">({\n  mode = \"single\" as T,\n  formatStr = \"PPP\",\n  open,\n  onOpenChange,\n  defaultOpen,\n  modal,\n  children,\n  month: monthProp,\n  defaultMonth,\n  onMonthChange,\n  value: valueProp,\n  defaultValue,\n  onValueChange,\n  disabled,\n  required = false,\n}: DatePickerProps) => {\n  // Use `null` as empty value when in controlled mode.\n  const [value, setValue] = useControllableState<DatePickerValue<T>>({\n    prop: valueProp as DatePickerValue<T>,\n    defaultProp: defaultValue as DatePickerValue<T>,\n    onChange: onValueChange as (value: DatePickerValue<T>) => void,\n  })\n  const [month, setMonth] = useControllableState({\n    prop: monthProp,\n    defaultProp: defaultMonth,\n    onChange: onMonthChange,\n  })\n\n  return (\n    <DatePickerContext.Provider\n      value={\n        {\n          mode,\n          required,\n          formatStr,\n          month,\n          onMonthChange: setMonth,\n          value,\n          onValueChange: setValue,\n          disabled,\n        } as DatePickerContextProps\n      }\n    >\n      <PopoverPrimitive.Root\n        open={open}\n        onOpenChange={onOpenChange}\n        defaultOpen={defaultOpen}\n        modal={modal}\n      >\n        {children}\n      </PopoverPrimitive.Root>\n    </DatePickerContext.Provider>\n  )\n}\n\nexport const DatePickerTrigger = PopoverPrimitive.Trigger\n\nexport const DatePickerDateField = React.forwardRef<\n  React.ElementRef<typeof DateTimeFieldPrimitive.Root>,\n  Omit<\n    React.ComponentPropsWithoutRef<typeof DateTimeFieldPrimitive.Root>,\n    \"value\" | \"onValueChange\"\n  >\n>(({ disabled: disabledProp, ...props }, ref) => {\n  const { mode, onMonthChange, value, onValueChange, required, disabled } =\n    useDatePickerContext()\n\n  if (mode !== \"single\") {\n    throw new Error(\n      '<DatePickerDateField> should only be used when mode is \"single\"'\n    )\n  }\n\n  return (\n    <DateTimeFieldPrimitive.Root\n      ref={ref}\n      disabled={disabled || disabledProp}\n      value={value}\n      onValueChange={(date) => {\n        if (date) {\n          onValueChange(date)\n          onMonthChange(date)\n        } else if (!required) {\n          onValueChange(null)\n        }\n      }}\n      {...props}\n    />\n  )\n})\nDatePickerDateField.displayName = \"DatePickerDateField\"\n\nexport const DatePickerDateFieldSeparator = DateTimeFieldPrimitive.Separator\n\nexport const DatePickerDateFieldYears = DateTimeFieldPrimitive.Years\n\nexport const DatePickerDateFieldMonths = DateTimeFieldPrimitive.Months\n\nexport const DatePickerDateFieldDays = DateTimeFieldPrimitive.Days\n\nexport const DatePickerAnchor = PopoverPrimitive.Anchor\n\nexport const DatePickerPortal = PopoverPrimitive.Portal\n\nexport const DatePickerDateRangeField = React.forwardRef<\n  React.ElementRef<typeof DateTimeRangeFieldPrimitive.Root>,\n  Omit<\n    React.ComponentPropsWithoutRef<typeof DateTimeRangeFieldPrimitive.Root>,\n    \"value\" | \"onValueChange\"\n  >\n>(({ disabled: disabledProp, ...props }, ref) => {\n  const { mode, onMonthChange, value, onValueChange, required, disabled } =\n    useDatePickerContext()\n\n  if (mode !== \"range\") {\n    throw new Error(\n      '<DatePickerDateRangeField> should only be used when mode is \"range\"'\n    )\n  }\n\n  return (\n    <DateTimeRangeFieldPrimitive.Root\n      ref={ref}\n      disabled={disabled || disabledProp}\n      value={value}\n      onValueChange={(value) => {\n        if (value) {\n          onValueChange(value)\n          if (value.from) {\n            onMonthChange(value.from)\n          }\n        } else if (!required) {\n          onValueChange(null)\n        }\n      }}\n      {...props}\n    />\n  )\n})\nDatePickerDateRangeField.displayName = \"DatePickerDateRangeField\"\n\nexport const DatePickerDateRangeFieldFrom = DateTimeRangeFieldPrimitive.From\n\nexport const DatePickerDateRangeFieldTo = DateTimeRangeFieldPrimitive.To\n\nexport const DatePickerDateRangeFieldSeparator =\n  DateTimeRangeFieldPrimitive.Separator\n\nexport const DatePickerDateRangeFieldYears = DateTimeRangeFieldPrimitive.Years\n\nexport const DatePickerDateRangeFieldMonths = DateTimeRangeFieldPrimitive.Months\n\nexport const DatePickerDateRangeFieldDays = DateTimeRangeFieldPrimitive.Days\n\nexport const DatePickerClear = React.forwardRef<\n  React.ElementRef<typeof Primitive.button>,\n  React.ComponentPropsWithoutRef<typeof Primitive.button>\n>(({ onClick, ...props }, ref) => {\n  const { required, value, onValueChange } = useDatePickerContext()\n\n  return (\n    <Primitive.button\n      ref={ref}\n      disabled={required || !value}\n      onClick={composeEventHandlers(\n        onClick,\n        () => !required && onValueChange(null)\n      )}\n      {...props}\n    />\n  )\n})\nDatePickerClear.displayName = \"DatePickerClear\"\n\nexport interface DatePickerValueProps\n  extends Radix.PrimitivePropsWithRef<typeof Primitive.span> {\n  placeholder?: React.ReactNode\n}\n\nexport const DatePickerValue = React.forwardRef<\n  React.ElementRef<typeof Primitive.span>,\n  DatePickerValueProps\n>(({ placeholder, children, ...props }, ref) => {\n  const { mode, formatStr, value } = useDatePickerContext()\n\n  const isValueEmpty = React.useMemo(() => {\n    if (mode === \"single\") {\n      return !value\n    }\n    if (mode === \"multiple\") {\n      return !value?.length\n    }\n    return !value?.from\n  }, [mode, value])\n\n  const formattedValue = React.useMemo(() => {\n    if (!value) {\n      return null\n    }\n    if (mode === \"single\") {\n      return format(value, formatStr)\n    }\n    if (mode === \"multiple\") {\n      return value.map((v) => format(v, formatStr)).join(\", \")\n    }\n    return `${value.from ? format(value.from, formatStr) : \"Select a date\"} - ${value.to ? format(value.to, formatStr) : \"Select a date\"}`\n  }, [mode, value, formatStr])\n\n  return (\n    <Primitive.span\n      ref={ref}\n      data-placeholder={isValueEmpty ? true : undefined}\n      {...props}\n    >\n      {isValueEmpty ? placeholder : (children ?? formattedValue)}\n    </Primitive.span>\n  )\n})\nDatePickerValue.displayName = \"DatePickerValue\"\n\nexport const DatePickerContent = PopoverPrimitive.Content\n\nexport interface DatePickerCalendarProps\n  extends Omit<\n    DayPickerPrimitiveProps,\n    | \"mode\"\n    | \"selected\"\n    | \"onSelect\"\n    | \"month\"\n    | \"onMonthChange\"\n    | \"disabled\"\n    | \"required\"\n  > {\n  asChild?: boolean\n  children?: React.ReactNode\n}\n\nexport const DatePickerCalendar = ({\n  asChild,\n  autoFocus = true,\n  ...props\n}: DatePickerCalendarProps) => {\n  const {\n    mode,\n    month,\n    onMonthChange,\n    value,\n    onValueChange,\n    disabled,\n    required,\n  } = useDatePickerContext()\n\n  const Comp = asChild ? (Slot as typeof DayPicker) : DayPicker\n\n  return (\n    <Comp\n      mode={mode}\n      {...({\n        selected: value === null ? undefined : value,\n        required,\n      } as React.ComponentProps<typeof Comp>)}\n      onSelect={(value: Date | Date[] | DateRange | undefined) => {\n        if (!value && !required) {\n          onValueChange(null)\n        }\n        if (mode === \"single\") {\n          onValueChange(value as Date)\n        }\n        if (mode === \"multiple\") {\n          onValueChange(value as Date[])\n        }\n        if (mode === \"range\") {\n          onValueChange(value as DateRange)\n        }\n      }}\n      month={month}\n      onMonthChange={onMonthChange}\n      disabled={disabled}\n      autoFocus={autoFocus}\n      {...props}\n    />\n  )\n}\n\nconst Root = DatePicker\nconst DateField = DatePickerDateField\nconst DateFieldSeparator = DatePickerDateFieldSeparator\nconst DateFieldYears = DatePickerDateFieldYears\nconst DateFieldMonths = DatePickerDateFieldMonths\nconst DateFieldDays = DatePickerDateFieldDays\nconst DateRangeField = DatePickerDateRangeField\nconst DateRangeFieldFrom = DatePickerDateRangeFieldFrom\nconst DateRangeFieldTo = DatePickerDateRangeFieldTo\nconst DateRangeFieldSeparator = DatePickerDateRangeFieldSeparator\nconst DateRangeFieldYears = DatePickerDateRangeFieldYears\nconst DateRangeFieldMonths = DatePickerDateRangeFieldMonths\nconst DateRangeFieldDays = DatePickerDateRangeFieldDays\nconst Value = DatePickerValue\nconst Clear = DatePickerClear\nconst Trigger = DatePickerTrigger\nconst Anchor = DatePickerAnchor\nconst Portal = DatePickerPortal\nconst Content = DatePickerContent\nconst Calendar = DatePickerCalendar\n\nexport {\n  Root,\n  DateField,\n  DateFieldSeparator,\n  DateFieldYears,\n  DateFieldMonths,\n  DateFieldDays,\n  DateRangeField,\n  DateRangeFieldFrom,\n  DateRangeFieldTo,\n  DateRangeFieldSeparator,\n  DateRangeFieldYears,\n  DateRangeFieldMonths,\n  DateRangeFieldDays,\n  Value,\n  Clear,\n  Trigger,\n  Anchor,\n  Portal,\n  Content,\n  Calendar,\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}