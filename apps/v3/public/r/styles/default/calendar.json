{
  "name": "calendar",
  "type": "registry:ui",
  "dependencies": [
    "react-day-picker",
    "date-fns"
  ],
  "registryDependencies": [
    "button",
    "select"
  ],
  "files": [
    {
      "path": "ui/calendar.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { ChevronDown, ChevronLeft, ChevronRight, ChevronUp } from \"lucide-react\"\nimport { DayPicker, UI, useDayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/registry/default/ui/button\"\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/registry/default/ui/select\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  captionLayout = \"label\",\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      captionLayout={captionLayout}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        button_next: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"size-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        button_previous: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"size-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        caption_label: \"text-sm font-medium aria-hidden:hidden\",\n        day_button: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"size-9 font-normal\"\n        ),\n        day: \"rounded-md p-0 text-center text-sm aria-selected:bg-accent\",\n        disabled: \"*:text-muted-foreground *:opacity-50\",\n        dropdown: \"first:basis-3/5 last:basis-2/5\",\n        dropdowns: \"flex basis-full items-center gap-2 text-sm font-medium\",\n        hidden: \"invisible\",\n        month_caption: \"flex items-center justify-center pt-1\",\n        month_grid: \"w-full border-collapse space-y-1\",\n        month: cn(\n          \"space-y-4\",\n          captionLayout !== \"label\" && !props.hideNavigation && \"mt-9\"\n        ),\n        months:\n          \"relative flex flex-col gap-y-4 sm:flex-row sm:gap-x-4 sm:gap-y-0\",\n        nav: \"absolute flex w-full items-center justify-between space-x-1 px-1\",\n        outside:\n          \"*:text-muted-foreground *:opacity-50 *:aria-selected:bg-accent/50 *:aria-selected:text-muted-foreground *:aria-selected:opacity-30\",\n        range_end: \"rounded-l-none\",\n        range_middle:\n          \"rounded-none first:rounded-l-md last:rounded-r-md *:aria-selected:bg-accent *:aria-selected:text-accent-foreground\",\n        range_start: \"rounded-r-none\",\n        selected:\n          \"*:bg-primary *:text-primary-foreground *:hover:bg-primary *:hover:text-primary-foreground *:focus:bg-primary *:focus:text-primary-foreground\",\n        today: \"*:bg-accent *:text-accent-foreground\",\n        week: \"mt-2 flex w-full\",\n        weekday: \"w-9 text-[0.8rem] font-normal text-muted-foreground\",\n        weekdays: \"flex\",\n        ...classNames,\n      }}\n      components={{\n        Chevron: ({ orientation }) => {\n          switch (orientation) {\n            case \"up\":\n              return <ChevronUp className=\"size-4\" />\n            case \"down\":\n              return <ChevronDown className=\"size-4\" />\n            case \"left\":\n              return <ChevronLeft className=\"size-4\" />\n            case \"right\":\n            default:\n              return <ChevronRight className=\"size-4\" />\n          }\n        },\n        Dropdown: ({\n          \"aria-label\": ariaLabel,\n          disabled,\n          value,\n          onChange,\n          options,\n          className,\n        }) => {\n          const { classNames } = useDayPicker()\n\n          return (\n            <Select\n              disabled={disabled}\n              value={`${value}`}\n              onValueChange={(value) =>\n                onChange?.({\n                  target: { value },\n                } as React.ChangeEvent<HTMLSelectElement>)\n              }\n            >\n              <SelectTrigger\n                aria-label={ariaLabel}\n                className={cn(classNames[UI.Dropdown], className)}\n              >\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {options?.map((option) => (\n                  <SelectItem\n                    key={option.value}\n                    value={`${option.value}`}\n                    disabled={option.disabled}\n                  >\n                    {option.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          )\n        },\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}