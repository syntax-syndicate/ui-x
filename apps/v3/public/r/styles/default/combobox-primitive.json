{
  "name": "combobox-primitive",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/primitive",
    "@radix-ui/react-compose-refs",
    "@radix-ui/react-popover",
    "@radix-ui/react-primitive",
    "@radix-ui/react-roving-focus",
    "@radix-ui/react-use-controllable-state",
    "cmdk"
  ],
  "files": [
    {
      "path": "ui/combobox-primitive.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { composeEventHandlers } from \"@radix-ui/primitive\"\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\nimport { Primitive } from \"@radix-ui/react-primitive\"\nimport * as RovingFocusGroupPrimitive from \"@radix-ui/react-roving-focus\"\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\"\nimport { Command as CommandPrimitive } from \"cmdk\"\n\nexport type ComboboxContextProps = {\n  inputValue: string\n  onInputValueChange: (\n    inputValue: string,\n    reason: \"inputChange\" | \"itemSelect\" | \"clearClick\"\n  ) => void\n  onInputBlur?: (e: React.FocusEvent<HTMLInputElement, Element>) => void\n  open: boolean\n  onOpenChange: (open: boolean) => void\n  currentTabStopId: string | null\n  onCurrentTabStopIdChange: (currentTabStopId: string | null) => void\n  inputRef: React.RefObject<HTMLInputElement>\n  tagGroupRef: React.RefObject<\n    React.ElementRef<typeof RovingFocusGroupPrimitive.Root>\n  >\n  disabled?: boolean\n  required?: boolean\n} & (\n  | Required<Pick<ComboboxSingleProps, \"type\" | \"value\" | \"onValueChange\">>\n  | Required<Pick<ComboboxMultipleProps, \"type\" | \"value\" | \"onValueChange\">>\n)\n\nconst ComboboxContext = React.createContext<ComboboxContextProps>({\n  type: \"single\",\n  value: \"\",\n  onValueChange: () => {},\n  inputValue: \"\",\n  onInputValueChange: () => {},\n  onInputBlur: () => {},\n  open: false,\n  onOpenChange: () => {},\n  currentTabStopId: null,\n  onCurrentTabStopIdChange: () => {},\n  inputRef: { current: null },\n  tagGroupRef: { current: null },\n  disabled: false,\n  required: false,\n})\n\nexport const useComboboxContext = () => React.useContext(ComboboxContext)\n\nexport type ComboboxType = \"single\" | \"multiple\"\n\nexport interface ComboboxBaseProps\n  extends React.ComponentProps<typeof PopoverPrimitive.Root>,\n    Omit<\n      React.ComponentProps<typeof CommandPrimitive>,\n      \"value\" | \"defaultValue\" | \"onValueChange\"\n    > {\n  type?: ComboboxType | undefined\n  inputValue?: string\n  defaultInputValue?: string\n  onInputValueChange?: (\n    inputValue: string,\n    reason: \"inputChange\" | \"itemSelect\" | \"clearClick\"\n  ) => void\n  onInputBlur?: (e: React.FocusEvent<HTMLInputElement, Element>) => void\n  disabled?: boolean\n  required?: boolean\n}\n\nexport type ComboboxValue<T extends ComboboxType = \"single\"> =\n  T extends \"single\" ? string : T extends \"multiple\" ? string[] : never\n\nexport interface ComboboxSingleProps {\n  type: \"single\"\n  value?: string\n  defaultValue?: string\n  onValueChange?: (value: string) => void\n}\n\nexport interface ComboboxMultipleProps {\n  type: \"multiple\"\n  value?: string[]\n  defaultValue?: string[]\n  onValueChange?: (value: string[]) => void\n}\n\nexport type ComboboxProps = ComboboxBaseProps &\n  (ComboboxSingleProps | ComboboxMultipleProps)\n\nexport const Combobox = React.forwardRef(\n  <T extends ComboboxType = \"single\">(\n    {\n      type = \"single\" as T,\n      open: openProp,\n      onOpenChange,\n      defaultOpen,\n      modal,\n      children,\n      value: valueProp,\n      defaultValue,\n      onValueChange,\n      inputValue: inputValueProp,\n      defaultInputValue,\n      onInputValueChange,\n      onInputBlur,\n      disabled,\n      required,\n      ...props\n    }: ComboboxProps,\n    ref: React.ForwardedRef<React.ElementRef<typeof CommandPrimitive>>\n  ) => {\n    const [value = type === \"multiple\" ? [] : \"\", setValue] =\n      useControllableState<ComboboxValue<T>>({\n        prop: valueProp as ComboboxValue<T>,\n        defaultProp: defaultValue as ComboboxValue<T>,\n        onChange: onValueChange as (value: ComboboxValue<T>) => void,\n      })\n    const [inputValue = \"\", setInputValue] = useControllableState({\n      prop: inputValueProp,\n      defaultProp: defaultInputValue,\n    })\n    const [open = false, setOpen] = useControllableState({\n      prop: openProp,\n      defaultProp: defaultOpen,\n      onChange: onOpenChange,\n    })\n    const [currentTabStopId, setCurrentTabStopId] = React.useState<\n      string | null\n    >(null)\n    const inputRef = React.useRef<HTMLInputElement>(null)\n    const tagGroupRef =\n      React.useRef<React.ElementRef<typeof RovingFocusGroupPrimitive.Root>>(\n        null\n      )\n\n    const handleInputValueChange: ComboboxContextProps[\"onInputValueChange\"] =\n      React.useCallback(\n        (inputValue, reason) => {\n          setInputValue(inputValue)\n          onInputValueChange?.(inputValue, reason)\n        },\n        [setInputValue, onInputValueChange]\n      )\n\n    return (\n      <ComboboxContext.Provider\n        value={\n          {\n            type,\n            value,\n            onValueChange: setValue,\n            inputValue,\n            onInputValueChange: handleInputValueChange,\n            onInputBlur,\n            open,\n            onOpenChange: setOpen,\n            currentTabStopId,\n            onCurrentTabStopIdChange: setCurrentTabStopId,\n            inputRef,\n            tagGroupRef,\n            disabled,\n            required,\n          } as ComboboxContextProps\n        }\n      >\n        <PopoverPrimitive.Root open={open} onOpenChange={setOpen} modal={modal}>\n          <CommandPrimitive ref={ref} {...props}>\n            {children}\n            {!open && <CommandPrimitive.List aria-hidden hidden />}\n          </CommandPrimitive>\n        </PopoverPrimitive.Root>\n      </ComboboxContext.Provider>\n    )\n  }\n)\nCombobox.displayName = \"Combobox\"\n\nexport const ComboboxTagGroup = React.forwardRef<\n  React.ElementRef<typeof RovingFocusGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RovingFocusGroupPrimitive.Root>\n>((props, ref) => {\n  const { currentTabStopId, onCurrentTabStopIdChange, tagGroupRef, type } =\n    useComboboxContext()\n\n  if (type !== \"multiple\") {\n    throw new Error(\n      '<ComboboxTagGroup> should only be used when type is \"multiple\"'\n    )\n  }\n\n  const composedRefs = useComposedRefs(ref, tagGroupRef)\n\n  return (\n    <RovingFocusGroupPrimitive.Root\n      ref={composedRefs}\n      tabIndex={-1}\n      currentTabStopId={currentTabStopId}\n      onCurrentTabStopIdChange={onCurrentTabStopIdChange}\n      onBlur={() => onCurrentTabStopIdChange(null)}\n      {...props}\n    />\n  )\n})\nComboboxTagGroup.displayName = \"ComboboxTagGroup\"\n\nexport interface ComboboxTagGroupItemProps\n  extends React.ComponentPropsWithoutRef<\n    typeof RovingFocusGroupPrimitive.Item\n  > {\n  value: string\n  disabled?: boolean\n}\n\nconst ComboboxTagGroupItemContext = React.createContext<\n  Pick<ComboboxTagGroupItemProps, \"value\" | \"disabled\">\n>({\n  value: \"\",\n  disabled: false,\n})\n\nconst useComboboxTagGroupItemContext = () =>\n  React.useContext(ComboboxTagGroupItemContext)\n\nexport const ComboboxTagGroupItem = React.forwardRef<\n  React.ElementRef<typeof RovingFocusGroupPrimitive.Item>,\n  ComboboxTagGroupItemProps\n>(({ onClick, onKeyDown, value: valueProp, disabled, ...props }, ref) => {\n  const { value, onValueChange, inputRef, currentTabStopId, type } =\n    useComboboxContext()\n\n  if (type !== \"multiple\") {\n    throw new Error(\n      '<ComboboxTagGroupItem> should only be used when type is \"multiple\"'\n    )\n  }\n\n  const lastItemValue = value.at(-1)\n\n  return (\n    <ComboboxTagGroupItemContext.Provider\n      value={{ value: valueProp, disabled }}\n    >\n      <RovingFocusGroupPrimitive.Item\n        ref={ref}\n        onKeyDown={composeEventHandlers(onKeyDown, (event) => {\n          if (event.key === \"Escape\") {\n            inputRef.current?.focus()\n          }\n          if (event.key === \"ArrowUp\" || event.key === \"ArrowDown\") {\n            event.preventDefault()\n            inputRef.current?.focus()\n          }\n          if (\n            event.key === \"ArrowRight\" &&\n            currentTabStopId === lastItemValue\n          ) {\n            inputRef.current?.focus()\n          }\n          if (event.key === \"Backspace\" || event.key === \"Delete\") {\n            onValueChange(value.filter((v) => v !== currentTabStopId))\n            inputRef.current?.focus()\n          }\n        })}\n        onClick={composeEventHandlers(\n          onClick,\n          () => disabled && inputRef.current?.focus()\n        )}\n        tabStopId={valueProp}\n        focusable={!disabled}\n        data-disabled={disabled}\n        active={valueProp === lastItemValue}\n        {...props}\n      />\n    </ComboboxTagGroupItemContext.Provider>\n  )\n})\nComboboxTagGroupItem.displayName = \"ComboboxTagGroupItem\"\n\nexport const ComboboxTagGroupItemRemove = React.forwardRef<\n  React.ElementRef<typeof Primitive.button>,\n  React.ComponentPropsWithoutRef<typeof Primitive.button>\n>(({ onClick, ...props }, ref) => {\n  const { value, onValueChange, type } = useComboboxContext()\n\n  if (type !== \"multiple\") {\n    throw new Error(\n      '<ComboboxTagGroupItemRemove> should only be used when type is \"multiple\"'\n    )\n  }\n\n  const { value: valueProp, disabled } = useComboboxTagGroupItemContext()\n\n  return (\n    <Primitive.button\n      ref={ref}\n      aria-hidden\n      tabIndex={-1}\n      disabled={disabled}\n      onClick={composeEventHandlers(onClick, () =>\n        onValueChange(value.filter((v) => v !== valueProp))\n      )}\n      {...props}\n    />\n  )\n})\nComboboxTagGroupItemRemove.displayName = \"ComboboxTagGroupItemRemove\"\n\nexport const ComboboxInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  Omit<\n    React.ComponentProps<typeof CommandPrimitive.Input>,\n    \"value\" | \"onValueChange\"\n  >\n>(({ onKeyDown, onMouseDown, onFocus, onBlur, ...props }, ref) => {\n  const {\n    type,\n    inputValue,\n    onInputValueChange,\n    onInputBlur,\n    open,\n    onOpenChange,\n    value,\n    onValueChange,\n    inputRef,\n    disabled,\n    required,\n    tagGroupRef,\n  } = useComboboxContext()\n\n  const composedRefs = useComposedRefs(ref, inputRef)\n\n  return (\n    <CommandPrimitive.Input\n      ref={composedRefs}\n      disabled={disabled}\n      required={required}\n      value={inputValue}\n      onValueChange={(search) => {\n        if (!open) {\n          onOpenChange(true)\n        }\n        // Schedule input value change to the next tick.\n        setTimeout(() => onInputValueChange(search, \"inputChange\"))\n        if (!search && type === \"single\") {\n          onValueChange(\"\")\n        }\n      }}\n      onKeyDown={composeEventHandlers(onKeyDown, (event) => {\n        if (event.key === \"ArrowUp\" || event.key === \"ArrowDown\") {\n          if (!open) {\n            event.preventDefault()\n            onOpenChange(true)\n          }\n        }\n        if (type !== \"multiple\") {\n          return\n        }\n        if (event.key === \"ArrowLeft\" && !inputValue && value.length) {\n          tagGroupRef.current?.focus()\n        }\n        if (event.key === \"Backspace\" && !inputValue) {\n          onValueChange(value.slice(0, -1))\n        }\n      })}\n      onMouseDown={composeEventHandlers(onMouseDown, () =>\n        onOpenChange(!!inputValue || !open)\n      )}\n      onFocus={composeEventHandlers(onFocus, () => onOpenChange(true))}\n      onBlur={composeEventHandlers(onBlur, (event) => {\n        if (!event.relatedTarget?.hasAttribute(\"cmdk-list\")) {\n          onInputBlur?.(event)\n        }\n      })}\n      {...props}\n    />\n  )\n})\nComboboxInput.displayName = \"ComboboxInput\"\n\nexport const ComboboxClear = React.forwardRef<\n  React.ElementRef<typeof Primitive.button>,\n  React.ComponentPropsWithoutRef<typeof Primitive.button>\n>(({ onClick, ...props }, ref) => {\n  const { value, onValueChange, inputValue, onInputValueChange, type } =\n    useComboboxContext()\n\n  const isValueEmpty = type === \"single\" ? !value : !value.length\n\n  return (\n    <Primitive.button\n      ref={ref}\n      disabled={isValueEmpty && !inputValue}\n      onClick={composeEventHandlers(onClick, () => {\n        if (type === \"single\") {\n          onValueChange(\"\")\n        } else {\n          onValueChange([])\n        }\n        onInputValueChange(\"\", \"clearClick\")\n      })}\n      {...props}\n    />\n  )\n})\nComboboxClear.displayName = \"ComboboxClear\"\n\nexport const ComboboxTrigger = PopoverPrimitive.Trigger\n\nexport const ComboboxAnchor = PopoverPrimitive.Anchor\n\nexport const ComboboxPortal = PopoverPrimitive.Portal\n\nexport const ComboboxContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ children, onOpenAutoFocus, onInteractOutside, ...props }, ref) => (\n  <PopoverPrimitive.Content\n    asChild\n    ref={ref}\n    onOpenAutoFocus={composeEventHandlers(onOpenAutoFocus, (event) =>\n      event.preventDefault()\n    )}\n    onCloseAutoFocus={composeEventHandlers(onOpenAutoFocus, (event) =>\n      event.preventDefault()\n    )}\n    onInteractOutside={composeEventHandlers(onInteractOutside, (event) => {\n      if (\n        event.target instanceof Element &&\n        event.target.hasAttribute(\"cmdk-input\")\n      ) {\n        event.preventDefault()\n      }\n    })}\n    {...props}\n  >\n    <CommandPrimitive.List>{children}</CommandPrimitive.List>\n  </PopoverPrimitive.Content>\n))\nComboboxContent.displayName = \"ComboboxContent\"\n\nexport const ComboboxEmpty = CommandPrimitive.Empty\n\nexport const ComboboxLoading = CommandPrimitive.Loading\n\nexport interface ComboboxItemProps\n  extends Omit<\n    React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>,\n    \"value\"\n  > {\n  value: string\n}\n\nconst ComboboxItemContext = React.createContext({ isSelected: false })\n\nconst useComboboxItemContext = () => React.useContext(ComboboxItemContext)\n\nconst findComboboxItemText = (children: React.ReactNode) => {\n  let text = \"\"\n\n  React.Children.forEach(children, (child) => {\n    if (text) {\n      return\n    }\n\n    if (React.isValidElement<{ children: React.ReactNode }>(child)) {\n      if (child.type === ComboboxItemText) {\n        text = child.props.children as string\n      } else {\n        text = findComboboxItemText(child.props.children)\n      }\n    }\n  })\n\n  return text\n}\n\nexport const ComboboxItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  ComboboxItemProps\n>(({ value: valueProp, children, onMouseDown, ...props }, ref) => {\n  const { type, value, onValueChange, onInputValueChange, onOpenChange } =\n    useComboboxContext()\n\n  const inputValue = React.useMemo(\n    () => findComboboxItemText(children),\n    [children]\n  )\n\n  const isSelected =\n    type === \"single\" ? value === valueProp : value.includes(valueProp)\n\n  return (\n    <ComboboxItemContext.Provider value={{ isSelected }}>\n      <CommandPrimitive.Item\n        ref={ref}\n        onMouseDown={composeEventHandlers(onMouseDown, (event) =>\n          event.preventDefault()\n        )}\n        onSelect={() => {\n          if (type === \"multiple\") {\n            onValueChange(\n              value.includes(valueProp)\n                ? value.filter((v) => v !== valueProp)\n                : [...value, valueProp]\n            )\n            onInputValueChange(\"\", \"itemSelect\")\n          } else {\n            onValueChange(valueProp)\n            onInputValueChange(inputValue, \"itemSelect\")\n            // Schedule open change to the next tick.\n            setTimeout(() => onOpenChange(false))\n          }\n        }}\n        value={inputValue}\n        {...props}\n      >\n        {children}\n      </CommandPrimitive.Item>\n    </ComboboxItemContext.Provider>\n  )\n})\nComboboxItem.displayName = \"ComboboxItem\"\n\nexport const ComboboxItemIndicator = React.forwardRef<\n  React.ElementRef<typeof Primitive.span>,\n  React.ComponentPropsWithoutRef<typeof Primitive.span>\n>((props, ref) => {\n  const { isSelected } = useComboboxItemContext()\n\n  if (!isSelected) {\n    return null\n  }\n\n  return <Primitive.span ref={ref} aria-hidden {...props} />\n})\nComboboxItemIndicator.displayName = \"ComboboxItemIndicator\"\n\nexport interface ComboboxItemTextProps\n  extends React.ComponentPropsWithoutRef<typeof React.Fragment> {\n  children: string\n}\n\nexport const ComboboxItemText = (props: ComboboxItemTextProps) => (\n  <React.Fragment {...props} />\n)\nComboboxItemText.displayName = \"ComboboxItemText\"\n\nexport const ComboboxGroup = CommandPrimitive.Group\n\nexport const ComboboxSeparator = CommandPrimitive.Separator\n\nconst Root = Combobox\nconst TagGroup = ComboboxTagGroup\nconst TagGroupItem = ComboboxTagGroupItem\nconst TagGroupItemRemove = ComboboxTagGroupItemRemove\nconst Input = ComboboxInput\nconst Clear = ComboboxClear\nconst Trigger = ComboboxTrigger\nconst Anchor = ComboboxAnchor\nconst Portal = ComboboxPortal\nconst Content = ComboboxContent\nconst Empty = ComboboxEmpty\nconst Loading = ComboboxLoading\nconst Item = ComboboxItem\nconst ItemIndicator = ComboboxItemIndicator\nconst ItemText = ComboboxItemText\nconst Group = ComboboxGroup\nconst Separator = ComboboxSeparator\n\nexport {\n  Root,\n  TagGroup,\n  TagGroupItem,\n  TagGroupItemRemove,\n  Input,\n  Clear,\n  Trigger,\n  Anchor,\n  Portal,\n  Content,\n  Empty,\n  Loading,\n  Item,\n  ItemIndicator,\n  ItemText,\n  Group,\n  Separator,\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}