{
  "name": "sortable",
  "type": "registry:ui",
  "dependencies": [
    "@dnd-kit/core",
    "@dnd-kit/sortable",
    "@dnd-kit/utilities",
    "@radix-ui/primitive",
    "@radix-ui/react-compose-refs",
    "@radix-ui/react-portal",
    "@radix-ui/react-primitive"
  ],
  "files": [
    {
      "path": "ui/sortable.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport type { DndContextProps, UniqueIdentifier } from \"@dnd-kit/core\"\nimport {\n  closestCenter,\n  DndContext,\n  DragOverlay,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n} from \"@dnd-kit/core\"\nimport {\n  horizontalListSortingStrategy,\n  NewIndexGetter,\n  SortableContext,\n  SortableContextProps,\n  sortableKeyboardCoordinates,\n  useSortable,\n  verticalListSortingStrategy,\n} from \"@dnd-kit/sortable\"\nimport { CSS, Transform } from \"@dnd-kit/utilities\"\nimport { composeEventHandlers } from \"@radix-ui/primitive\"\nimport { composeRefs } from \"@radix-ui/react-compose-refs\"\nimport * as PortalPrimitive from \"@radix-ui/react-portal\"\nimport { Primitive } from \"@radix-ui/react-primitive\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst SortableImplContext = React.createContext<\n  Pick<SortableProps, \"getNewIndex\"> &\n    Required<Pick<SortableProps, \"getTransformStyle\">> & {\n      activeId: UniqueIdentifier | null\n    }\n>({\n  activeId: null,\n  getTransformStyle: CSS.Transform.toString,\n})\n\nfunction useSortableImplContext() {\n  const context = React.useContext(SortableImplContext)\n\n  if (!context) {\n    throw new Error(\"useSortableImplContext must be used within a <Sortable />\")\n  }\n\n  return context\n}\n\nexport interface SortableProps extends DndContextProps {\n  onReorder?: (oldIndex: number, newIndex: number) => void\n  getNewIndex?: NewIndexGetter\n  getTransformStyle?: (\n    transform: Transform | null\n  ) => React.CSSProperties[\"transform\"]\n}\n\nexport const Sortable = ({\n  onDragStart,\n  onDragEnd,\n  onDragCancel,\n  getNewIndex,\n  collisionDetection = closestCenter,\n  getTransformStyle = CSS.Transform.toString,\n  ...props\n}: SortableProps) => {\n  const [activeId, setActiveId] = React.useState<UniqueIdentifier | null>(null)\n\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  )\n\n  return (\n    <SortableImplContext.Provider\n      value={{\n        activeId,\n        getTransformStyle,\n        getNewIndex,\n      }}\n    >\n      <DndContext\n        onDragStart={composeEventHandlers(onDragStart, ({ active }) =>\n          setActiveId(active.id)\n        )}\n        onDragEnd={composeEventHandlers(onDragEnd, () => setActiveId(null))}\n        onDragCancel={composeEventHandlers(onDragCancel, () =>\n          setActiveId(null)\n        )}\n        collisionDetection={collisionDetection}\n        sensors={sensors}\n        {...props}\n      />\n    </SortableImplContext.Provider>\n  )\n}\n\nexport interface SortableListProps\n  extends Omit<SortableContextProps, \"children\">,\n    React.ComponentPropsWithoutRef<typeof Primitive.ul> {\n  orientation?: \"vertical\" | \"horizontal\"\n}\n\nexport const SortableList = React.forwardRef<\n  React.ElementRef<typeof Primitive.ul>,\n  SortableListProps\n>(\n  (\n    {\n      orientation = \"vertical\",\n      strategy = orientation === \"vertical\"\n        ? verticalListSortingStrategy\n        : horizontalListSortingStrategy,\n      items,\n      disabled,\n      id,\n      ...props\n    },\n    ref\n  ) => (\n    <SortableContext\n      strategy={strategy}\n      items={items}\n      disabled={disabled}\n      id={id}\n    >\n      <Primitive.ul ref={ref} data-orientation={orientation} {...props} />\n    </SortableContext>\n  )\n)\nSortableList.displayName = \"SortableList\"\n\nexport type SortableGridProps = Omit<SortableContextProps, \"children\"> &\n  React.ComponentPropsWithoutRef<typeof Primitive.div>\n\nexport const SortableGrid = React.forwardRef<\n  React.ElementRef<typeof Primitive.div>,\n  SortableGridProps\n>(({ strategy, items, disabled, id, ...props }, ref) => (\n  <SortableContext\n    strategy={strategy}\n    items={items}\n    disabled={disabled}\n    id={id}\n  >\n    <Primitive.div ref={ref} {...props} />\n  </SortableContext>\n))\nSortableGrid.displayName = \"SortableGrid\"\n\nconst SortableItemContext = React.createContext<\n  Pick<SortableItemProps, \"id\" | \"disabled\">\n>({\n  id: \"\",\n  disabled: false,\n})\n\nfunction useSortableItemContext() {\n  const context = React.useContext(SortableItemContext)\n\n  if (!context) {\n    throw new Error(\n      \"useSortableItemContext must be used within a <SortableItem />\"\n    )\n  }\n\n  return context\n}\n\nexport type SortableItemProps = Omit<\n  React.ComponentPropsWithoutRef<typeof Primitive.div>,\n  \"id\"\n> &\n  Pick<Parameters<typeof useSortable>[0], \"id\" | \"disabled\">\n\nexport const SortableItem = React.forwardRef<\n  React.ElementRef<typeof Primitive.div>,\n  SortableItemProps\n>(({ id, disabled, style: styleProp, ...props }, ref) => {\n  const { getTransformStyle, getNewIndex } = useSortableImplContext()\n\n  const {\n    attributes,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n    isOver,\n    isSorting,\n  } = useSortable({\n    id,\n    disabled,\n    getNewIndex,\n  })\n\n  const style = {\n    transform: getTransformStyle(transform),\n    transition,\n    ...styleProp,\n  }\n\n  return (\n    <SortableItemContext.Provider value={{ id, disabled }}>\n      <Primitive.div\n        ref={composeRefs(setNodeRef as React.RefCallback<HTMLDivElement>, ref)}\n        style={style}\n        data-dragging={isDragging ? true : undefined}\n        data-over={isOver ? true : undefined}\n        data-sorting={isSorting ? true : undefined}\n        {...attributes}\n        {...props}\n      />\n    </SortableItemContext.Provider>\n  )\n})\nSortableItem.displayName = \"SortableItem\"\n\nexport const SortableItemTrigger = React.forwardRef<\n  React.ElementRef<typeof Primitive.button>,\n  React.ComponentPropsWithoutRef<typeof Primitive.button>\n>(({ className, disabled: disabledProp, ...props }, ref) => {\n  const { getNewIndex } = useSortableImplContext()\n\n  const { id, disabled } = useSortableItemContext()\n\n  const { listeners, setActivatorNodeRef, isDragging, isOver, isSorting } =\n    useSortable({\n      id,\n      disabled: disabledProp || disabled,\n      getNewIndex,\n    })\n\n  return (\n    <Primitive.button\n      ref={composeRefs(\n        setActivatorNodeRef as React.RefCallback<HTMLButtonElement>,\n        ref\n      )}\n      data-dragging={isDragging ? true : undefined}\n      data-over={isOver ? true : undefined}\n      data-sorting={isSorting ? true : undefined}\n      disabled={disabledProp}\n      className={cn(\"touch-none\", className)}\n      {...listeners}\n      {...props}\n    />\n  )\n})\nSortableItemTrigger.displayName = \"SortableItemTrigger\"\n\nexport interface SortableOverlayProps\n  extends Omit<React.ComponentPropsWithoutRef<typeof DragOverlay>, \"children\"> {\n  children?: React.ReactNode | ((id: UniqueIdentifier) => React.ReactNode)\n}\n\nexport const SortableOverlay = ({\n  children,\n  ...props\n}: SortableOverlayProps) => {\n  const { activeId } = useSortableImplContext()\n\n  return (\n    <PortalPrimitive.Root>\n      <DragOverlay {...props}>\n        {activeId &&\n          (typeof children === \"function\" ? children(activeId) : children)}\n      </DragOverlay>\n    </PortalPrimitive.Root>\n  )\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}