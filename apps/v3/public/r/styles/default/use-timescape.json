{
  "name": "use-timescape",
  "type": "registry:hook",
  "dependencies": [
    "@radix-ui/react-use-controllable-state",
    "react-day-picker",
    "timescape"
  ],
  "files": [
    {
      "path": "hooks/use-timescape.ts",
      "content": "import * as React from \"react\"\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\"\nimport { DateRange } from \"react-day-picker\"\nimport {\n  Options,\n  useTimescape as useReactTimescape,\n  useTimescapeRange as useReactTimescapeRange,\n} from \"timescape/react\"\n\nexport type TimescapeOptions = Omit<Options, \"date\" | \"onChangeDate\">\n\nexport interface UseTimescapeOptions extends TimescapeOptions {\n  value?: Date | null\n  defaultValue?: Date\n  onValueChange?: (value: Date | null) => void\n}\n\nexport const useTimescape = ({\n  value: valueProp,\n  defaultValue,\n  onValueChange,\n  digits,\n  hour12,\n  maxDate,\n  minDate,\n  snapToStep,\n  wheelControl,\n  wrapAround,\n}: UseTimescapeOptions) => {\n  const [value, setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange,\n  })\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { update, _manager, ...timescape } = useReactTimescape({\n    date: !value ? undefined : value, // This is the initial value.\n    onChangeDate: setValue,\n    digits,\n    hour12,\n    maxDate,\n    minDate,\n    snapToStep,\n    wheelControl,\n    wrapAround,\n    // Partial input does not work with reactive value at the moment.\n    // For more information, see https://github.com/dan-lee/timescape/issues/51.\n    disallowPartial: true,\n  })\n\n  React.useEffect(() => {\n    update((prevOptions) => ({\n      ...prevOptions,\n      date: !value ? undefined : value,\n    }))\n  }, [value, update])\n\n  React.useEffect(() => {\n    update((prevOptions) => ({ ...prevOptions, digits }))\n  }, [digits, update])\n\n  React.useEffect(() => {\n    update((prevOptions) => ({ ...prevOptions, hour12 }))\n  }, [hour12, update])\n\n  React.useEffect(() => {\n    update((prevOptions) => ({ ...prevOptions, maxDate }))\n  }, [maxDate, update])\n\n  React.useEffect(() => {\n    update((prevOptions) => ({ ...prevOptions, minDate }))\n  }, [minDate, update])\n\n  React.useEffect(() => {\n    update((prevOptions) => ({ ...prevOptions, snapToStep }))\n  }, [snapToStep, update])\n\n  React.useEffect(() => {\n    update((prevOptions) => ({ ...prevOptions, wheelControl }))\n  }, [wheelControl, update])\n\n  React.useEffect(() => {\n    update((prevOptions) => ({ ...prevOptions, wrapAround }))\n  }, [wrapAround, update])\n\n  return timescape\n}\n\nexport interface UseTimescapeRangeOptions extends TimescapeOptions {\n  value?: DateRange | null\n  defaultValue?: DateRange\n  onValueChange?: (value: DateRange | null) => void\n  from?: TimescapeOptions\n  to?: TimescapeOptions\n}\n\nexport const useTimescapeRange = ({\n  value: valueProp,\n  defaultValue,\n  onValueChange,\n  digits,\n  hour12,\n  maxDate,\n  minDate,\n  snapToStep,\n  wheelControl,\n  wrapAround,\n  from: fromOptions = {},\n  to: toOptions = {},\n}: UseTimescapeRangeOptions) => {\n  const [value, setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange,\n  })\n\n  const { from, to, ...timescape } = useReactTimescapeRange({\n    from: {\n      date: !value?.from ? undefined : value.from, // This is the initial value.\n      onChangeDate: (from) =>\n        setValue((prevValue) => ({ from, to: prevValue?.to })),\n      digits,\n      hour12,\n      maxDate,\n      minDate,\n      snapToStep,\n      wheelControl,\n      wrapAround,\n      // Partial input does not work with reactive value at the moment.\n      // For more information, see https://github.com/dan-lee/timescape/issues/51.\n      disallowPartial: true,\n      ...fromOptions,\n    },\n    to: {\n      date: !value?.to ? undefined : value.to, // This is the initial value.\n      onChangeDate: (to) =>\n        setValue((prevValue) => ({ from: prevValue?.from, to })),\n      digits,\n      hour12,\n      maxDate,\n      minDate,\n      snapToStep,\n      wheelControl,\n      wrapAround,\n      // Partial input does not work with reactive value at the moment.\n      // For more information, see https://github.com/dan-lee/timescape/issues/51.\n      disallowPartial: true,\n      ...toOptions,\n    },\n  })\n\n  // ----------------------------------------------------------------------------\n  // Sync `from`\n  // ----------------------------------------------------------------------------\n\n  const { update: fromUpdate, ...fromTimescape } = from\n\n  React.useEffect(() => {\n    fromUpdate((prevOptions) => ({\n      ...prevOptions,\n      digits: fromOptions.digits ?? digits,\n    }))\n  }, [digits, fromOptions.digits, fromUpdate])\n\n  React.useEffect(() => {\n    fromUpdate((prevOptions) => ({\n      ...prevOptions,\n      hour12: fromOptions.hour12 ?? hour12,\n    }))\n  }, [hour12, fromOptions.hour12, fromUpdate])\n\n  React.useEffect(() => {\n    fromUpdate((prevOptions) => ({\n      ...prevOptions,\n      maxDate: fromOptions.maxDate ?? maxDate,\n    }))\n  }, [maxDate, fromOptions.maxDate, fromUpdate])\n\n  React.useEffect(() => {\n    fromUpdate((prevOptions) => ({\n      ...prevOptions,\n      minDate: fromOptions.minDate ?? minDate,\n    }))\n  }, [minDate, fromOptions.minDate, fromUpdate])\n\n  React.useEffect(() => {\n    fromUpdate((prevOptions) => ({\n      ...prevOptions,\n      snapToStep: fromOptions.snapToStep ?? snapToStep,\n    }))\n  }, [snapToStep, fromOptions.snapToStep, fromUpdate])\n\n  React.useEffect(() => {\n    fromUpdate((prevOptions) => ({\n      ...prevOptions,\n      wheelControl: fromOptions.wheelControl ?? wheelControl,\n    }))\n  }, [wheelControl, fromOptions.wheelControl, fromUpdate])\n\n  React.useEffect(() => {\n    fromUpdate((prevOptions) => ({\n      ...prevOptions,\n      wrapAround: fromOptions.wrapAround ?? wrapAround,\n    }))\n  }, [wrapAround, fromOptions.wrapAround, fromUpdate])\n\n  // ----------------------------------------------------------------------------\n  // Sync `to`\n  // ----------------------------------------------------------------------------\n\n  const { update: toUpdate, ...toTimescape } = to\n\n  React.useEffect(() => {\n    toUpdate((prevOptions) => ({\n      ...prevOptions,\n      digits: toOptions.digits ?? digits,\n    }))\n  }, [digits, toOptions.digits, toUpdate])\n\n  React.useEffect(() => {\n    toUpdate((prevOptions) => ({\n      ...prevOptions,\n      hour12: toOptions.hour12 ?? hour12,\n    }))\n  }, [hour12, toOptions.hour12, toUpdate])\n\n  React.useEffect(() => {\n    toUpdate((prevOptions) => ({\n      ...prevOptions,\n      maxDate: toOptions.maxDate ?? maxDate,\n    }))\n  }, [maxDate, toOptions.maxDate, toUpdate])\n\n  React.useEffect(() => {\n    toUpdate((prevOptions) => ({\n      ...prevOptions,\n      minDate: toOptions.minDate ?? minDate,\n    }))\n  }, [minDate, toOptions.minDate, toUpdate])\n\n  React.useEffect(() => {\n    toUpdate((prevOptions) => ({\n      ...prevOptions,\n      snapToStep: toOptions.snapToStep ?? snapToStep,\n    }))\n  }, [snapToStep, toOptions.snapToStep, toUpdate])\n\n  React.useEffect(() => {\n    toUpdate((prevOptions) => ({\n      ...prevOptions,\n      wheelControl: toOptions.wheelControl ?? wheelControl,\n    }))\n  }, [wheelControl, toOptions.wheelControl, toUpdate])\n\n  React.useEffect(() => {\n    toUpdate((prevOptions) => ({\n      ...prevOptions,\n      wrapAround: toOptions.wrapAround ?? wrapAround,\n    }))\n  }, [wrapAround, toOptions.wrapAround, toUpdate])\n\n  // ----------------------------------------------------------------------------\n  // Sync `value`\n  // ----------------------------------------------------------------------------\n\n  React.useEffect(() => {\n    fromUpdate((prevOptions) => ({\n      ...prevOptions,\n      date: !value?.from ? undefined : value.from,\n    }))\n    toUpdate((prevOptions) => ({\n      ...prevOptions,\n      date: !value?.to ? undefined : value.to,\n    }))\n  }, [value, fromUpdate, toUpdate])\n\n  return {\n    ...timescape,\n    from: fromTimescape,\n    to: toTimescape,\n  }\n}\n",
      "type": "registry:hook"
    }
  ]
}