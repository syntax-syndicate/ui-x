{
  "name": "virtualized",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-compose-refs",
    "@radix-ui/react-primitive",
    "virtua"
  ],
  "files": [
    {
      "path": "ui/virtualized.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { composeRefs } from \"@radix-ui/react-compose-refs\"\nimport { Primitive } from \"@radix-ui/react-primitive\"\nimport { experimental_VGrid as VGrid, Virtualizer, VList } from \"virtua\"\n\nconst VirtualizedContext = React.createContext<{\n  scrollRef: React.RefObject<React.ElementRef<typeof Primitive.div>>\n  withScrollRef: boolean\n}>({\n  scrollRef: {\n    current: null,\n  },\n  withScrollRef: false,\n})\n\nfunction useVirtualized() {\n  const context = React.useContext(VirtualizedContext)\n\n  if (!context) {\n    throw new Error(\"useVirtualized must be used within a <Virtualized />\")\n  }\n\n  return context\n}\n\nconst Virtualized = React.forwardRef<\n  React.ElementRef<typeof Primitive.div>,\n  React.ComponentPropsWithoutRef<typeof Primitive.div>\n>((props, ref) => {\n  const scrollRef = React.useRef<React.ElementRef<typeof Primitive.div>>(null)\n\n  return (\n    <VirtualizedContext.Provider value={{ scrollRef, withScrollRef: true }}>\n      <Primitive.div ref={composeRefs(scrollRef, ref)} {...props} />\n    </VirtualizedContext.Provider>\n  )\n})\nVirtualized.displayName = \"Virtualized\"\n\nexport interface VirtualizedListProps\n  extends Omit<React.ComponentPropsWithoutRef<typeof VList>, \"horizontal\"> {\n  orientation?: \"vertical\" | \"horizontal\"\n}\n\nconst VirtualizedList = React.forwardRef<\n  React.ElementRef<typeof VList>,\n  VirtualizedListProps\n>(({ orientation = \"vertical\", ...props }, ref) => {\n  const { withScrollRef } = useVirtualized()\n\n  if (withScrollRef) {\n    throw new Error(\n      \"<VirtualizedList /> must not be used within a <Virtualized />\"\n    )\n  }\n\n  return (\n    <VList ref={ref} horizontal={orientation === \"horizontal\"} {...props} />\n  )\n})\nVirtualizedList.displayName = \"VirtualizedList\"\n\nconst VirtualizedGrid = VGrid\n\nconst VirtualizedVirtualizer = React.forwardRef<\n  React.ElementRef<typeof Virtualizer>,\n  Omit<React.ComponentPropsWithoutRef<typeof Virtualizer>, \"scrollRef\">\n>((props, ref) => {\n  const { scrollRef, withScrollRef } = useVirtualized()\n\n  return (\n    <Virtualizer\n      ref={ref}\n      scrollRef={withScrollRef ? scrollRef : undefined}\n      {...props}\n    />\n  )\n})\nVirtualizedVirtualizer.displayName = \"VirtualizedVirtualizer\"\n\nexport { Virtualized, VirtualizedList, VirtualizedGrid, VirtualizedVirtualizer }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}