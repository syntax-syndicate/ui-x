{
  "name": "dropzone-primitive",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/primitive",
    "@radix-ui/react-primitive",
    "react-dropzone"
  ],
  "files": [
    {
      "path": "ui/dropzone-primitive.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { composeEventHandlers } from \"@radix-ui/primitive\"\nimport { Primitive } from \"@radix-ui/react-primitive\"\nimport {\n  FileRejection,\n  FileWithPath,\n  useDropzone,\n  type DropzoneOptions,\n  type DropzoneState,\n} from \"react-dropzone\"\n\nexport type DropzoneContextProps = DropzoneState & DropzoneOptions\n\nconst DropzoneContext = React.createContext<DropzoneContextProps>(\n  {} as DropzoneContextProps\n)\n\nexport const useDropzoneContext = () => React.useContext(DropzoneContext)\n\nexport interface DropzoneProps extends DropzoneOptions {\n  children: React.ReactNode | ((state: DropzoneContextProps) => React.ReactNode)\n}\n\nexport const Dropzone = ({ children, ...props }: DropzoneProps) => {\n  const state = useDropzone(props)\n\n  const context = { ...state, ...props }\n\n  return (\n    <DropzoneContext.Provider value={context}>\n      {typeof children === \"function\" ? children(context) : children}\n    </DropzoneContext.Provider>\n  )\n}\nDropzone.displayName = \"Dropzone\"\n\nexport const DropzoneInput = React.forwardRef<\n  React.ElementRef<typeof Primitive.input>,\n  React.ComponentPropsWithoutRef<typeof Primitive.input>\n>((props, ref) => {\n  const { getInputProps, disabled } = useDropzoneContext()\n\n  return (\n    <Primitive.input ref={ref} {...getInputProps({ disabled, ...props })} />\n  )\n})\nDropzoneInput.displayName = \"DropzoneInput\"\n\nexport const DropzoneZone = React.forwardRef<\n  React.ElementRef<typeof Primitive.div>,\n  React.ComponentPropsWithoutRef<typeof Primitive.div>\n>((props, ref) => {\n  const {\n    getRootProps,\n    isFocused,\n    isDragActive,\n    isDragAccept,\n    isDragReject,\n    isFileDialogActive,\n    preventDropOnDocument,\n    noClick,\n    noKeyboard,\n    noDrag,\n    noDragEventsBubbling,\n    disabled,\n  } = useDropzoneContext()\n\n  return (\n    <Primitive.div\n      ref={ref}\n      data-prevent-drop-on-document={preventDropOnDocument ? true : undefined}\n      data-no-click={noClick ? true : undefined}\n      data-no-keyboard={noKeyboard ? true : undefined}\n      data-no-drag={noDrag ? true : undefined}\n      data-no-drag-events-bubbling={noDragEventsBubbling ? true : undefined}\n      data-disabled={disabled ? true : undefined}\n      data-focused={isFocused ? true : undefined}\n      data-drag-active={isDragActive ? true : undefined}\n      data-drag-accept={isDragAccept ? true : undefined}\n      data-drag-reject={isDragReject ? true : undefined}\n      data-file-dialog-active={isFileDialogActive ? true : undefined}\n      {...getRootProps(props)}\n    />\n  )\n})\nDropzoneZone.displayName = \"DropzoneZone\"\n\nexport const DropzoneTrigger = React.forwardRef<\n  React.ElementRef<typeof Primitive.button>,\n  React.ComponentPropsWithoutRef<typeof Primitive.button>\n>(({ onClick, ...props }, ref) => {\n  const { open } = useDropzoneContext()\n\n  return (\n    <Primitive.button\n      ref={ref}\n      onClick={composeEventHandlers(onClick, open)}\n      {...props}\n    />\n  )\n})\nDropzoneTrigger.displayName = \"DropzoneTrigger\"\n\nexport interface DropzoneDragAcceptedProps {\n  children?: React.ReactNode\n}\n\nexport const DropzoneDragAccepted = ({\n  children,\n}: DropzoneDragAcceptedProps) => {\n  const { isDragAccept } = useDropzoneContext()\n\n  if (!isDragAccept) {\n    return null\n  }\n\n  return children\n}\n\nexport interface DropzoneDragRejectedProps {\n  children?: React.ReactNode\n}\n\nexport const DropzoneDragRejected = ({\n  children,\n}: DropzoneDragRejectedProps) => {\n  const { isDragReject } = useDropzoneContext()\n\n  if (!isDragReject) {\n    return null\n  }\n\n  return children\n}\n\nexport interface DropzoneDragDefaultProps {\n  children?: React.ReactNode\n}\n\nexport const DropzoneDragDefault = ({ children }: DropzoneDragDefaultProps) => {\n  const { isDragActive } = useDropzoneContext()\n\n  if (isDragActive) {\n    return null\n  }\n\n  return children\n}\n\nexport interface DropzoneAcceptedProps {\n  children: (acceptedFiles: Readonly<FileWithPath[]>) => React.ReactNode\n}\n\nexport const DropzoneAccepted = ({ children }: DropzoneAcceptedProps) => {\n  const { acceptedFiles } = useDropzoneContext()\n\n  return children(acceptedFiles)\n}\n\nexport interface DropzoneRejectedProps {\n  children: (fileRejections: Readonly<FileRejection[]>) => React.ReactNode\n}\n\nexport const DropzoneRejected = ({ children }: DropzoneRejectedProps) => {\n  const { fileRejections } = useDropzoneContext()\n\n  return children(fileRejections)\n}\n\nconst Root = Dropzone\nconst Input = DropzoneInput\nconst Zone = DropzoneZone\nconst Trigger = DropzoneTrigger\nconst DragAccepted = DropzoneDragAccepted\nconst DragRejected = DropzoneDragRejected\nconst DragDefault = DropzoneDragDefault\nconst Accepted = DropzoneAccepted\nconst Rejected = DropzoneRejected\n\nexport {\n  Root,\n  Input,\n  Zone,\n  Trigger,\n  DragAccepted,\n  DragRejected,\n  DragDefault,\n  Accepted,\n  Rejected,\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}