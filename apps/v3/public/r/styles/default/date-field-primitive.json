{
  "name": "date-field-primitive",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/primitive",
    "@radix-ui/react-primitive",
    "@radix-ui/react-use-controllable-state",
    "date-fns"
  ],
  "files": [
    {
      "path": "ui/date-field-primitive.tsx",
      "content": "import * as React from \"react\"\nimport { composeEventHandlers } from \"@radix-ui/primitive\"\nimport { Primitive } from \"@radix-ui/react-primitive\"\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\"\nimport { format, isValid, parse } from \"date-fns\"\n\nexport interface DateFieldProps\n  extends Omit<\n    React.ComponentPropsWithoutRef<typeof Primitive.input>,\n    \"value\" | \"defaultValue\"\n  > {\n  inputFormatStr?: string\n  value?: Date | null\n  defaultValue?: Date\n  onValueChange?: (value: Date | null) => void\n  /**\n   * If true, the input's text is cleared on blur if date string is invalid.\n   */\n  clearOnBlur?: boolean\n}\n\nconst DateField = React.forwardRef<\n  React.ElementRef<typeof Primitive.input>,\n  DateFieldProps\n>(\n  (\n    {\n      value: valueProp,\n      defaultValue,\n      onValueChange,\n      onBlur,\n      inputFormatStr = \"yyyy-MM-dd\",\n      clearOnBlur,\n      ...props\n    },\n    ref\n  ) => {\n    const [value, setValue] = useControllableState({\n      prop: valueProp,\n      defaultProp: defaultValue,\n      onChange: onValueChange,\n    })\n\n    const [inputValue, setInputValue] = React.useState(\n      value ? format(value, inputFormatStr) : \"\"\n    )\n    React.useEffect(() => {\n      setInputValue(value ? format(value, inputFormatStr) : \"\")\n    }, [value, inputFormatStr])\n\n    return (\n      <Primitive.input\n        ref={ref}\n        value={inputValue}\n        onChange={(event) => setInputValue(event.target.value)}\n        onBlur={composeEventHandlers(onBlur, (event) => {\n          const parsedDate = parse(\n            event.target.value,\n            inputFormatStr,\n            new Date()\n          )\n\n          if (!isValid(parsedDate)) {\n            if (clearOnBlur || !inputValue) {\n              setValue(null)\n              setInputValue(\"\")\n            } else {\n              setInputValue(value ? format(value, inputFormatStr) : \"\")\n            }\n            return\n          }\n\n          setValue(parsedDate)\n          setInputValue(format(parsedDate, inputFormatStr))\n        })}\n        placeholder={inputFormatStr}\n        {...props}\n      />\n    )\n  }\n)\nDateField.displayName = \"DateField\"\n\nconst Root = DateField\n\nexport { Root }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}