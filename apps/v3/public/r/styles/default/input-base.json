{
  "name": "input-base",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/primitive",
    "@radix-ui/react-compose-refs",
    "@radix-ui/react-primitive",
    "@radix-ui/react-slot"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "ui/input-base.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { composeEventHandlers } from \"@radix-ui/primitive\"\nimport { composeRefs } from \"@radix-ui/react-compose-refs\"\nimport { Primitive } from \"@radix-ui/react-primitive\"\nimport { Slot } from \"@radix-ui/react-slot\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/registry/default/ui/button\"\n\nexport type InputBaseContextProps = Pick<\n  InputBaseProps,\n  \"autoFocus\" | \"disabled\"\n> & {\n  controlRef: React.RefObject<HTMLElement>\n  onFocusedChange: (focused: boolean) => void\n}\n\nconst InputBaseContext = React.createContext<InputBaseContextProps>({\n  autoFocus: false,\n  controlRef: { current: null },\n  disabled: false,\n  onFocusedChange: () => {},\n})\n\nconst useInputBaseContext = () => React.useContext(InputBaseContext)\n\nexport interface InputBaseProps\n  extends React.ComponentPropsWithoutRef<typeof Primitive.div> {\n  autoFocus?: boolean\n  disabled?: boolean\n}\n\nexport const InputBase = React.forwardRef<\n  React.ElementRef<typeof Primitive.div>,\n  InputBaseProps\n>(({ autoFocus, disabled, className, onClick, ...props }, ref) => {\n  const [focused, setFocused] = React.useState(false)\n\n  const controlRef = React.useRef<HTMLElement>(null)\n\n  return (\n    <InputBaseContext.Provider\n      value={{\n        autoFocus,\n        controlRef,\n        disabled,\n        onFocusedChange: setFocused,\n      }}\n    >\n      <Primitive.div\n        ref={ref}\n        onClick={composeEventHandlers(onClick, (event) => {\n          // Based on MUI's <InputBase /> implementation.\n          // https://github.com/mui/material-ui/blob/master/packages/mui-material/src/InputBase/InputBase.js#L458~L460\n          if (controlRef.current && event.currentTarget === event.target) {\n            controlRef.current.focus()\n          }\n        })}\n        className={cn(\n          \"flex min-h-10 cursor-text items-center gap-2 rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background\",\n          disabled && \"cursor-not-allowed opacity-50\",\n          focused && \"outline-none ring-2 ring-ring ring-offset-2\",\n          className\n        )}\n        {...props}\n      />\n    </InputBaseContext.Provider>\n  )\n})\nInputBase.displayName = \"InputBase\"\n\nexport const InputBaseFlexWrapper = React.forwardRef<\n  React.ElementRef<typeof Primitive.div>,\n  React.ComponentPropsWithoutRef<typeof Primitive.div>\n>(({ className, ...props }, ref) => (\n  <Primitive.div\n    ref={ref}\n    className={cn(\"flex flex-1 flex-wrap\", className)}\n    {...props}\n  />\n))\nInputBaseFlexWrapper.displayName = \"InputBaseFlexWrapper\"\n\nexport const InputBaseControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ onFocus, onBlur, ...props }, ref) => {\n  const { controlRef, autoFocus, disabled, onFocusedChange } =\n    useInputBaseContext()\n\n  return (\n    <Slot\n      ref={composeRefs(controlRef, ref)}\n      autoFocus={autoFocus}\n      onFocus={composeEventHandlers(onFocus, () => onFocusedChange(true))}\n      onBlur={composeEventHandlers(onBlur, () => onFocusedChange(false))}\n      {...{ disabled }}\n      {...props}\n    />\n  )\n})\nInputBaseControl.displayName = \"InputBaseControl\"\n\nexport interface InputBaseAdornmentProps\n  extends React.ComponentPropsWithoutRef<\"div\"> {\n  asChild?: boolean\n  disablePointerEvents?: boolean\n}\n\nexport const InputBaseAdornment = React.forwardRef<\n  React.ElementRef<\"div\">,\n  InputBaseAdornmentProps\n>(({ className, disablePointerEvents, asChild, children, ...props }, ref) => {\n  const Comp = asChild ? Slot : typeof children === \"string\" ? \"p\" : \"div\"\n\n  const isAction =\n    React.isValidElement(children) && children.type === InputBaseAdornmentButton\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\n        \"flex items-center text-muted-foreground [&_svg]:size-4\",\n        (!isAction || disablePointerEvents) && \"pointer-events-none\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </Comp>\n  )\n})\nInputBaseAdornment.displayName = \"InputBaseAdornment\"\n\nexport const InputBaseAdornmentButton = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentPropsWithoutRef<typeof Button>\n>(\n  (\n    {\n      type = \"button\",\n      variant = \"ghost\",\n      size = \"icon\",\n      disabled: disabledProp,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const { disabled } = useInputBaseContext()\n\n    return (\n      <Button\n        ref={ref}\n        type={type}\n        variant={variant}\n        size={size}\n        disabled={disabled || disabledProp}\n        className={cn(\"size-6\", className)}\n        {...props}\n      />\n    )\n  }\n)\nInputBaseAdornmentButton.displayName = \"InputBaseAdornmentButton\"\n\nexport const InputBaseInput = React.forwardRef<\n  React.ElementRef<typeof Primitive.input>,\n  React.ComponentPropsWithoutRef<typeof Primitive.input>\n>(({ className, ...props }, ref) => (\n  <Primitive.input\n    ref={ref}\n    className={cn(\n      \"w-full flex-1 bg-transparent file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus:outline-none disabled:pointer-events-none\",\n      className\n    )}\n    {...props}\n  />\n))\nInputBaseInput.displayName = \"InputBaseInput\"\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}